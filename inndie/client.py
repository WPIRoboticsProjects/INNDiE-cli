import json
import tempfile

import click
import boto3
import os.path

all_perm = {
    "FromPort": -1,
    "IpProtocol": "-1",
    "IpRanges": [{"CidrIp": "0.0.0.0/0"}],
    "Ipv6Ranges": [{"CidrIpv6": "::/0"}],
    "ToPort": -1
}

all_http_perm = {
    "FromPort": 80,
    "IpProtocol": "tcp",
    "IpRanges": [{"CidrIp": "0.0.0.0/0"}],
    "Ipv6Ranges": [{"CidrIpv6": "::/0"}],
    "ToPort": 80
}


def make_client(name, region):
    if region is None:
        return boto3.client(name)
    else:
        return boto3.client(name, region_name=region)


def make_resource(name):
    return boto3.resource(name)


def revoke_all_perms(sg):
    """
    Revokes all permissions from the SecurityGroup.

    :param sg: The SecurityGroup.
    """
    if len(sg.ip_permissions) > 0:
        sg.revoke_ingress(IpPermissions=sg.ip_permissions)

    if len(sg.ip_permissions_egress) > 0:
        sg.revoke_egress(IpPermissions=sg.ip_permissions_egress)


def ensure_ec2_gress(sg_id, region):
    """
    Rewrites the ingress and egress permissions for the SecurityGroup. All existing ingress and
    egress permissions are revoked. The permissions that INNDiE needs are authorized.

    :param sg_id: The SecurityGroup's GroupId.
    :param region: The region, or `None` to pull the region from the environment.
    :return: Nothing.
    """
    ec2 = boto3.resource('ec2', region_name=region)
    sg = ec2.SecurityGroup(sg_id)

    revoke_all_perms(sg)

    sg.authorize_egress(IpPermissions=[all_perm])
    sg.authorize_ingress(IpPermissions=[all_http_perm])


def get_single_security_group(client, sg_name, desc):
    """
    Ensures that exactly one matching SecurityGroup exists. If there is one match, its permissions
    are remade. If there is more than one match, a RuntimeError is raised. If there are no matches,
    a new SecurityGroup is made.

    :param client: The EC2 client to use.
    :param sg_name: The name of the SecurityGroup.
    :param desc: The description of the SecurityGroup, if it needs to be created.
    :return: The GroupId of the matching SecurityGroup.
    """
    security_groups = client.describe_security_groups(
        Filters=[
            {
                "Name": "group-name",
                "Values": [sg_name]
            }
        ]
    )["SecurityGroups"]

    sgs = [it for it in security_groups if it["GroupName"] == sg_name]
    if len(sgs) > 1:
        raise RuntimeError("Matched multiple security groups: {}".format(sgs))

    if len(sgs) == 1:
        # The SG already exists
        sg = sgs[0]
        sg_id = sg["GroupId"]
    else:
        sg_id = client.create_security_group(
            Description=desc,
            GroupName=sg_name
        )["GroupId"]

    return sg_id


def ensure_ec2_security_group(region):
    """
    Ensures that the EC2 SecurityGroup exists.
    :param region: The region, or `None` to pull the region from the environment.
    :return: The GroupId of the SecurityGroup.
    """
    sg_name = "inndie-autogenerated-ec2-sg"
    client = make_client("ec2", region)
    sg_id = get_single_security_group(client, sg_name, "INNDiE autogenerated for EC2.")
    ensure_ec2_gress(sg_id, region)
    return sg_id


def select_subnet(region):
    """
    Picks the first available subnet.
    :param region: The region, or `None` to pull the region from the environment.
    :return: The SubnetId.
    """
    client = make_client("ec2", region)
    return client.describe_subnets(Filters=[])["Subnets"][0]["SubnetId"]


def ensure_role(client, role_name):
    """
    Ensures that a SINGLE matching IAM role exists. Throws a `RuntimeError` if there are multiple
    matching roles.

    :param client: The iam client to use.
    :param role_name: The name of the IAM role.
    :return: The ARN of the matching IAM role, or `None` if there was no matching role.
    """
    roles = client.list_roles(PathPrefix="/")["Roles"]
    matching_roles = [it for it in roles if it["RoleName"] == role_name]
    if len(matching_roles) == 1:
        return matching_roles[0]["Arn"]
    elif len(matching_roles) > 1:
        raise RuntimeError("Found multiple matching roles: {}".format(role_name, roles))
    else:
        return None


def ensure_ec2_role(region, role_name="inndie-autogenerated-ec2-role"):
    """
    Ensures the EC2 role exists. Creates the role if it does not exist.

    :param region: The region, or `None` to pull the region from the environment.
    :param role_name: The name of the role to ensure.
    :return: The role Arn.
    """
    client = make_client("iam", region)
    role_arn = ensure_role(client, role_name)
    if role_arn is None:
        # Need to create the role
        role = client.create_role(
            Path="/",
            RoleName=role_name,
            AssumeRolePolicyDocument=json.dumps({
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "ec2.amazonaws.com"
                        },
                        "Action": "sts:AssumeRole"
                    }
                ]
            })
        )["Role"]

        role_arn = role["Arn"]

        client.attach_role_policy(RoleName=role_name,
                                  PolicyArn="arn:aws:iam::aws:policy/AmazonS3FullAccess")

    return role_arn


def ensure_ec2_instance_profile(region, profile_name="inndie-autogenerated-ec2-instance-profile",
                                role_name="inndie-autogenerated-ec2-role"):
    """
    Ensures the EC2 instance profile exists and has the EC2 role attached.

    :param region: The region, or `None` to pull the region from the environment.
    :param profile_name: The name of the instance profile to ensure.
    :param role_name: The name of the role to ensure.
    :return: The instance profile Arn.
    """
    client = make_client("iam", region)
    iam_resource = make_resource('iam')

    # Get or create the instance profile
    try:
        local_profile = client.get_instance_profile(InstanceProfileName=profile_name)
    except:
        local_profile = client.create_instance_profile(InstanceProfileName=profile_name)

    instance_profile = iam_resource.InstanceProfile(
        local_profile['InstanceProfile']['InstanceProfileName'])

    if role_name not in [role.name for role in instance_profile.roles]:
        # Add the role if it does not exist
        instance_profile.add_role(RoleName=role_name)

    return instance_profile.arn


def ensure_s3_bucket(region):
    """
    Ensures that a matching S3 bucket exists.

    :param region: The region, or `None` to pull the region from the environment.
    :return: The name of the bucket.
    """
    client = make_client("s3", region)
    prefix = "inndie-autogenerated-"  # Used to identify the bucket that INNDiE manages

    def get_inndie_bucket():
        buckets = client.list_buckets()["Buckets"]

        # Return the first matching bucket name, if there is one
        for bucket in buckets:
            if bucket["Name"].startswith(prefix):
                return bucket["Name"]

        return None

    inndie_bucket = get_inndie_bucket()
    if inndie_bucket is not None:
        return inndie_bucket

    # There is no matching bucket name, so create a new one
    import random
    import string
    while True:
        bucket_name = prefix + ''.join(
            random.choice(string.ascii_lowercase + string.digits) for _ in range(30))

        # If the user wants a region in this list, we need to set it
        if region in ['EU', 'eu-west-1', 'us-west-1', 'us-west-2',
                      'ap-south-1', 'ap-southeast-1', 'ap-southeast-2',
                      'ap-northeast-1', 'sa-east-1', 'cn-north-1',
                      'eu-central-1']:
            client.create_bucket(ACL='private', Bucket=bucket_name,
                                 CreateBucketConfiguration={'LocationConstraint': region})
        else:
            # Otherwise the region will be us-east-1
            client.create_bucket(ACL='private', Bucket=bucket_name)

        # Busy loop until the bucket is created. Otherwise, we will set the public access block
        # too early and its configuration will be lost
        while True:
            inndie_bucket = get_inndie_bucket()
            if inndie_bucket is not None:
                break

        client.put_public_access_block(Bucket=bucket_name, PublicAccessBlockConfiguration={
            'BlockPublicAcls': True,
            'IgnorePublicAcls': True,
            'BlockPublicPolicy': True,
            'RestrictPublicBuckets': True
        })

        return bucket_name


def impl_ensure_configuration(region):
    """
    Ensures all the configuration INNDiE needs is in place.

    :param region: The region, or `None` to pull the region from the environment.
    """
    ensure_s3_bucket(region)
    ensure_ec2_security_group(region)
    ensure_ec2_role(region)
    ensure_ec2_instance_profile(region)


def impl_upload_model(model_path, bucket_name, region):
    """
    Uploads a model to S3.

    :param model_path: The file path to the model to upload, ending with the name of the model.
    :param bucket_name: The S3 bucket name.
    :param region: The region, or `None` to pull the region from the environment.
    """
    client = make_client("s3", region)
    key = "inndie-models/" + os.path.basename(model_path)
    client.upload_file(model_path, bucket_name, key)
    print("Uploaded to: {}\n".format(key))


def impl_download_model(model_path, bucket_name, region):
    """
    Downloads a model from S3.

    :param model_path: The file path to download to, ending with the name of the model.
    :param bucket_name: The S3 bucket name.
    :param region: The region, or `None` to pull the region from the environment.
    """
    client = make_client("s3", region)
    key = "inndie-models/" + os.path.basename(model_path)
    client.download_file(bucket_name, key, model_path)
    print("Downloaded from: {}\n".format(key))


def impl_download_training_script(script_path, bucket_name, region):
    """
    Downloads a training script from S3.

    :param script_path: The file path to download to, ending with the name of the script.
    :param bucket_name: The S3 bucket name.
    :param region: The region, or `None` to pull the region from the environment.
    """
    client = make_client("s3", region)
    key = "inndie-training-scripts/" + os.path.basename(script_path)
    client.download_file(bucket_name, key, script_path)
    print("Downloaded from: {}\n".format(key))


def impl_upload_dataset(dataset_path, bucket_name, region):
    """
    Uploads a dataset to S3.

    :param dataset_path: The file path to the dataset to upload, ending with the name of the
    dataset.
    :param bucket_name: The S3 bucket name.
    :param region: The region, or `None` to pull the region from the environment.
    """
    client = make_client("s3", region)
    key = "inndie-datasets/" + os.path.basename(dataset_path)
    client.upload_file(dataset_path, bucket_name, key)
    print("Uploaded to: {}\n".format(key))


def impl_download_dataset(dataset_path, bucket_name, region):
    """
    Downloads a dataset from S3.

    :param dataset_path: The file path to download to, ending with the name of the dataset.
    :param bucket_name: The S3 bucket name.
    :param region: The region, or `None` to pull the region from the environment.
    """
    client = make_client("s3", region)
    key = "inndie-datasets/" + os.path.basename(dataset_path)
    client.download_file(bucket_name, key, dataset_path)
    print("Downloaded from: {}\n".format(key))


def impl_update_training_progress(job_id, progress_text, bucket_name, region):
    """
    Updates the training progress in S3 for a model specified by its name.

    :param job_id: The unique Job ID.
    :param progress_text: The text to write into the progress file.
    :param bucket_name: The S3 bucket name.
    :param region: The region, or `None` to pull the region from the environment.
    """
    local_file, path = tempfile.mkstemp()
    try:
        with open(local_file, "w") as f:
            f.write(progress_text)
        client = make_client("s3", region)
        remote_path = create_progress_prefix(job_id) + "/progress.txt"
        client.upload_file(path, bucket_name, remote_path)
        print("Updated progress in: {}\n".format(remote_path))
    finally:
        os.remove(path)


def impl_create_heartbeat(job_id, bucket_name, region):
    """
    Creates a heartbeat that INNDiE uses to check if the training script is running properly.

    :param job_id: The unique Job ID.
    :param bucket_name: The S3 bucket name.
    :param region: The region, or `None` to pull the region from the environment.
    """
    client = make_client("s3", region)
    remote_path = create_progress_prefix(job_id) + "/heartbeat.txt"
    client.put_object(Body="1", Bucket=bucket_name, Key=remote_path)
    print("Created heartbeat file in: {}\n".format(remote_path))


def impl_remove_heartbeat(job_id, bucket_name, region):
    """
    Removes a heartbeat that INNDiE uses to check if the training script is running properly.

    :param job_id: The unique Job ID.
    :param bucket_name: The S3 bucket name.
    :param region: The region, or `None` to pull the region from the environment.
    """
    client = make_client("s3", region)
    remote_path = create_progress_prefix(job_id) + "/heartbeat.txt"
    client.put_object(Body="0", Bucket=bucket_name, Key=remote_path)
    print("Removed heartbeat file in: {}\n".format(remote_path))


def impl_set_training_log_file(job_id, log_file, bucket_name, region):
    """
    Sets the training log file contents to the contents of the log file.

    :param job_id: The unique Job ID.
    :param log_file: The log file to read from.
    :param bucket_name: The S3 bucket name.
    :param region: The region, or `None` to pull the region from the environment.
    """
    client = make_client("s3", region)
    remote_path = create_progress_prefix(job_id) + "/log.txt"
    with open(log_file, "r") as f:
        client.put_object(Body=f.read(), Bucket=bucket_name, Key=remote_path)
        print("Set training log file in: {}\n".format(remote_path))


def impl_upload_training_results(job_id, output_dir, bucket_name, region):
    client = make_client("s3", region)
    files_to_upload = [os.path.join(output_dir, it) for it in os.listdir(output_dir)]
    files_to_upload = [it for it in files_to_upload if os.path.isfile(it)]
    for elem in files_to_upload:
        ext = os.path.splitext(elem)[1].lower()
        # Upload model files to the model prefix instead of the test result prefix so that users
        # can select them as models to start new Jobs with.
        if ext == ".h5" or ext == ".hdf5":
            impl_upload_model(os.path.abspath(elem), bucket_name, region)
        else:
            key = "inndie-training-results/{}/{}".format(job_id, os.path.basename(elem))
            client.upload_file(elem, bucket_name, key)
            print("Uploaded to: {}\n".format(key))


def create_progress_prefix(job_id):
    return "inndie-training-progress/{}".format(job_id)


@click.group()
def cli():
    return


region_choices = ['us-east-1', 'us-east-2', 'us-west-1', 'us-west-2', 'ca-central-1',
                  'eu-central-1', 'eu-west-1', 'eu-west-2', 'eu-west-3',
                  'eu-north-1', 'ap-east-1', 'ap-south-1', 'ap-northeast-1',
                  'ap-northeast-2', 'ap-northeast-3', 'ap-southeast-1',
                  'ap-southeast-2', 'me-south-1', 'sa-east-1']


@cli.command(name="ensure-configuration")
@click.option("--region", help="The region to connect to.",
              type=click.Choice(region_choices))
def ensure_configuration(region):
    """
    Ensures that AWS is configured for INNDiE.
    """
    impl_ensure_configuration(region)


@cli.command(name="upload-model")
@click.argument("model-path")
@click.option("--region", help="The region to connect to.",
              type=click.Choice(region_choices))
def upload_model(model_path, region):
    """
    Uploads a model from a local file.

    MODEL_PATH The path to the model to upload, ending with the name of the model.
    """
    impl_upload_model(model_path, ensure_s3_bucket(region), region)


@cli.command(name="download-model")
@click.argument("model-path")
@click.option("--region", help="The region to connect to.",
              type=click.Choice(region_choices))
def download_model(model_path, region):
    """
    Downloads a model to a local file.

    MODEL_PATH The path to download the model to, ending with the name of the model.
    """
    impl_download_model(model_path, ensure_s3_bucket(region), region)


@cli.command(name="download-training-script")
@click.argument("script-path")
@click.option("--region", help="The region to connect to.",
              type=click.Choice(region_choices))
def download_training_script(script_path, region):
    """
    Downloads a training script.

    SCRIPT_PATH The path to download the script to, ending with the name of the script.
    """
    impl_download_training_script(script_path, ensure_s3_bucket(region), region)


@cli.command(name="upload-dataset")
@click.argument("dataset-path")
@click.option("--region", help="The region to connect to.",
              type=click.Choice(region_choices))
def upload_dataset(dataset_path, region):
    """
    Uploads a dataset.

    DATASET_PATH The path to the dataset to upload, ending with the name of the dataset.
    """
    impl_upload_dataset(dataset_path, ensure_s3_bucket(region), region)


@cli.command(name="download-dataset")
@click.argument("dataset-path")
@click.option("--region", help="The region to connect to.",
              type=click.Choice(region_choices))
def download_dataset(dataset_path, region):
    """
    Downloads a dataset.

    DATASET_PATH The path to download the dataset to, ending with the name of the dataset.
    """
    impl_download_dataset(dataset_path, ensure_s3_bucket(region), region)


@cli.command(name="update-training-progress")
@click.argument("job-id")
@click.argument("progress-text")
@click.option("--region", help="The region to connect to.",
              type=click.Choice(region_choices))
def update_training_progress(job_id, progress_text, region):
    """
    Updates the training progress. Meant to be used while a training script is running to provide
    progress updates to INNDiE.

    JOB_ID The unique Job ID.

    PROGRESS_TEXT The text to write to the progress file.
    """
    impl_update_training_progress(job_id, progress_text, ensure_s3_bucket(region),
                                  region)


@cli.command(name="create-heartbeat")
@click.argument("job-id")
@click.option("--region", help="The region to connect to.",
              type=click.Choice(region_choices))
def create_heartbeat(job_id, region):
    """
    Creates a heartbeat that INNDiE uses to check if the training script is running properly.

    JOB_ID The unique Job ID.
    """
    impl_create_heartbeat(job_id, ensure_s3_bucket(region), region)


@cli.command(name="remove-heartbeat")
@click.argument("job-id")
@click.option("--region", help="The region to connect to.",
              type=click.Choice(region_choices))
def remove_heartbeat(job_id, region):
    """
    Removes a heartbeat that INNDiE uses to check if the training script is running properly.

    JOB_ID The unique Job ID.
    """
    impl_remove_heartbeat(job_id, ensure_s3_bucket(region), region)


@cli.command(name="set-training-log-file")
@click.argument("job-id")
@click.argument("log-file")
@click.option("--region", help="The region to connect to.",
              type=click.Choice(region_choices))
def set_training_log_file(job_id, log_file, region):
    """
    Sets the training log file contents to the contents of the log file.

    JOB_ID The unique Job ID.

    LOG_FILE The log file to read from.
    """
    impl_set_training_log_file(job_id, log_file, ensure_s3_bucket(region), region)


@cli.command(name="upload-training-results")
@click.argument("job-id")
@click.argument("output-dir")
@click.option("--region", help="The region to connect to.",
              type=click.Choice(region_choices))
def upload_training_results(job_id, output_dir, region):
    """
    Uploads the results from running a training script.

    JOB_ID The unique Job ID.

    OUTPUT_DIR The directory containing the results.
    """
    impl_upload_training_results(job_id, output_dir, ensure_s3_bucket(region), region)
